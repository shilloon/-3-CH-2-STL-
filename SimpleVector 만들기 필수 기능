#include <iostream>
#include <string>

using namespace std;

template <typename T>

class SimpleVector {

private:
	int currentSize;
	int currentCapacity;
	T* data;

	void resize() {
	
		int newCapacity = currentCapacity * 2;
		T* newData = new T[newCapacity];

		for (int i = 0; i < currentSize; i++) {

			newData[i] = data[i];

		}
	
		delete[] data;
		data = newData;
		currentCapacity = newCapacity;

	}

public:
	// 기본 생성자
	SimpleVector() : currentSize(0), currentCapacity(10){
	
		data = new T[currentCapacity];
		
	}
	// 크기 지정 0보다 작을 경우 에러 메세지
	SimpleVector(int capacity) : currentSize(0), currentCapacity(capacity) {

		if (capacity <= 0) {

			throw invalid_argument("Capacity must be bigger than 0");

		}
		data = new T[currentCapacity];
	
	}
	// 소멸자
	~SimpleVector() {

		delete[] data;

	}
	// 값 추가
	void push_back(const T& value) {

		if (currentSize == currentCapacity)
			return;

		data[currentSize++] = value;

	}
	// 마지막 저장값 제거
	void pop_back() {

		if (currentSize > 0)
			currentSize--;

	}
	// 현재 크기 반환
	int size() const {

		return currentSize;

	}
	// 현재 용량 반환
	int capacity() const {

		return currentCapacity;

	}

};

int main() {

	SimpleVector<int> vec;

	vec.push_back(1);
	vec.push_back(2);
	vec.push_back(3);

	cout << "Current Size is : " << vec.size() << endl;
	cout << "Current capacity is : " << vec.capacity() << endl;

	vec.pop_back();
	cout << "Current size after vector pop_back : " << vec.size() << endl;
	cout << "Current capacity after vector pop_back : " << vec.capacity() << endl;

	return 0;
}

#include <iostream>
#include <string>
#include <algorithm> // sort함수를 사용하기 위해 추가

using namespace std;

template <typename T>

class SimpleVector {

private:
	int currentSize;
	int currentCapacity;
	T* data;

	void resize(int newCapacity) {
	
		if (newCapacity <= currentCapacity) // 새로운 용량이 현재보다 작거나 같은 경우 동작안함
			return;

		T* newData = new T[newCapacity];

		for (int i = 0; i < currentSize; i++) {

			newData[i] = data[i];

		}
	
		delete[] data;
		data = newData;
		currentCapacity = newCapacity;

	}

public:

	// 기본 생성자
	SimpleVector() : currentSize(0), currentCapacity(10){
	
		data = new T[currentCapacity];
		
	}

	// 용량을 정하는 생성자
	SimpleVector(int capacity) : currentSize(0), currentCapacity(capacity) {

		if (capacity <= 0) {

			throw invalid_argument("Capacity must be bigger than 0"); // capacity가 0보다 작거나 같을 경우 오류 메세지 

		}
		data = new T[currentCapacity];
	
	}

	//복사 생성자
	SimpleVector(const SimpleVector& other) : currentSize(other.currentSize), currentCapacity(other.currentCapacity) {

		data = new T[currentCapacity];
		for (int i = 0; i < currentSize; i++) {

			data[i] = other.data[i];

		}

	}

	//소멸자
	~SimpleVector() {

		delete[] data;

	}

	//값 추가
	void push_back(const T& value) {

		if (currentSize == currentCapacity)
			resize(currentCapacity + 5);

		data[currentSize++] = value;

	}

	// 마지막 값 삭제
	void pop_back() {

		if (currentSize > 0)
			currentSize--;

	}

	//현재 크기 반환
	int size() const {

		return currentSize;

	}

	//현재 용량 반환
	int capacity() const {

		return currentCapacity;

	}

	// 내부 데이터 정렬
	void sortData() {

		sort(data, data + currentSize);

	}


	T& operator[](int index) {

		return data[index];

	}

	const T& operator[](int index) const {

		return data[index];

	}

};

int main() {

	SimpleVector<int> vec;

	vec.push_back(3);
	vec.push_back(1);
	vec.push_back(2);

	cout << "Current Size is : " << vec.size() << endl;
	cout << "Current capacity is : " << vec.capacity() << endl;

	vec.sortData();
	
	cout << "After Sort : ";

	for (int i = 0; i < vec.size(); i++) {

		cout << vec[i] << " ";

	}

	cout << endl;

	vec.pop_back();
	cout << "Current size after vector pop_back : " << vec.size() << endl;
	cout << "Current capacity after vector pop_back : " << vec.capacity() << endl;


	return 0;
}
